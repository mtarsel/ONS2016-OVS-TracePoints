From 0d981a549950e00068631cbaf91ebefcbcc2095b Mon Sep 17 00:00:00 2001
From: Mick Tarsel <mjtarsel@us.ibm.com>
Date: Mon, 26 Oct 2015 12:10:23 -0700
Subject: [PATCH] Following Packets with TRACE_EVENT Macro

This patch will allow a user to use tools like systemtap or perf to follow the path of a packet travling in the slow path. This patch will uniquely assign an ID number to packets traveling in the slow path and utilize TRACE_EVENT's in order to compute a packet's round-trip time (RTT). This TRACE_EVENT macro records which sk_buffer it is probing as well as the unique ID associated with each packet. The unique ID will continue to stay with the packet throughout OVS and allow us to use another trace event at the end of the packet's journey to compute RTT. We cannot simply probe the sk_buffer address because this will change when entering user space (so all packets taking the slow path) - this is why a unique ID number is needed. To use these TRACE_EVENT's in the code simply call the function trace_upcall_start(skb, tag_packet(skb)) and then trace_upcall_end(packet, report_packet(packet)) at the end of the packet's journey to get RTT. By default the output of the TRACE_EVENT will be saved in /sys/kernel/debug/tracing/events/openvswitch
---
 net/openvswitch/Makefile   |   2 +
 net/openvswitch/datapath.c |   9 ++++
 net/openvswitch/trace.h    | 106 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 117 insertions(+)
 create mode 100644 net/openvswitch/trace.h

diff --git a/net/openvswitch/Makefile b/net/openvswitch/Makefile
index 91b9478..4223bcd 100644
--- a/net/openvswitch/Makefile
+++ b/net/openvswitch/Makefile
@@ -18,3 +18,5 @@ openvswitch-y := \
 obj-$(CONFIG_OPENVSWITCH_GENEVE)+= vport-geneve.o
 obj-$(CONFIG_OPENVSWITCH_VXLAN)	+= vport-vxlan.o
 obj-$(CONFIG_OPENVSWITCH_GRE)	+= vport-gre.o
+
+CFLAGS_datapath.o := -I$(src)
diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 58a6ef5..0e74f7f 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -58,6 +58,10 @@
 #include "vport-internal_dev.h"
 #include "vport-netdev.h"
 
+/*define this only once and before trace.h is included*/
+#define CREATE_TRACE_POINTS
+#include "trace.h"
+
 int ovs_net_id __read_mostly;
 EXPORT_SYMBOL_GPL(ovs_net_id);
 
@@ -309,6 +313,8 @@ int ovs_dp_upcall(struct datapath *dp, struct sk_buff *skb,
 		err = -ENOTCONN;
 		goto err;
 	}
+	if (trace_upcall_start_enabled())
+		trace_upcall_start(skb, tag_packet(skb));
 
 	if (!skb_is_gso(skb))
 		err = queue_userspace_packet(dp, skb, key, upcall_info);
@@ -551,6 +557,9 @@ static int ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)
 	else
 		packet->protocol = htons(ETH_P_802_2);
 
+	if (trace_upcall_end_enabled())
+		trace_upcall_end(packet, report_packet(packet));
+
 	/* Build an sw_flow for sending this packet. */
 	flow = ovs_flow_alloc();
 	err = PTR_ERR(flow);
diff --git a/net/openvswitch/trace.h b/net/openvswitch/trace.h
new file mode 100644
index 0000000..c77a9cb
--- /dev/null
+++ b/net/openvswitch/trace.h
@@ -0,0 +1,106 @@
+/* Written by Mick Tarsel */
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM openvswitch
+
+#if !defined(_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+
+#include <linux/tracepoint.h>
+
+#if !defined(_TRACE_H_)
+
+struct packet_tag {
+	char eyeCatch;
+	unsigned long reqid;
+};
+
+#define TAGGED 0x69
+
+static inline int tag_packet(struct sk_buff *skb)
+{
+	struct packet_tag pkt_id;
+	static unsigned int id;
+	unsigned char *temp_pkt;
+
+	pkt_id.eyeCatch = TAGGED;
+	pkt_id.reqid = ++id;
+
+	if (sizeof(struct packet_tag) <= skb_tailroom(skb)) {
+		temp_pkt = skb_put(skb, sizeof(pkt_id));
+		memcpy(temp_pkt, &pkt_id, sizeof(pkt_id));
+		pr_debug("%s:skb=%p reqid=%lu\n", __func__, skb, pkt_id.reqid);
+		return id;
+	}
+
+	if (net_ratelimit())
+		pr_debug("%s:Insufficient room to tag skb=%p\n", __func__, skb);
+
+	return 0;
+}
+
+static inline int report_packet(struct sk_buff *skb)
+{
+	struct packet_tag *pkt_id;
+	unsigned char *temp_pkt;
+
+	temp_pkt = (skb->data)+(skb->len) - sizeof(struct packet_tag);
+	pkt_id = (struct packet_tag *)temp_pkt;
+
+	if (pkt_id->eyeCatch == TAGGED) {
+		pr_debug("%s:skb=%p reqid=%lu\n", __func__, skb, pkt_id->reqid);
+		return pkt_id->reqid;
+	}
+
+	return 0;
+}
+
+#endif
+
+#define _TRACE_H_
+
+/* Tracepoint for OVS packets: traces packets travelling between kernel
+and userspace to compute RTT of a packet travelling in the slow path*/
+
+/* upcall_start is the trace event which is invoked after the packet has been
+tagged by tag_packet(). This newly tagged packet will exit kernel space
+and travel into user space to be assigned to a new flow.*/
+
+TRACE_EVENT(upcall_start,
+
+	TP_PROTO(struct sk_buff *skb, int id),
+
+	TP_ARGS(skb, id),
+
+	TP_STRUCT__entry(
+		__field(    const void *,     skbaddr     )
+		__field(    u16,     protocol     )
+		__field(    int,        id      )
+	),
+
+	TP_fast_assign(
+		__entry->skbaddr = skb;
+		__entry->protocol = ntohs(skb->protocol);
+		__entry->id = (const int) id;
+	),
+
+	TP_printk("skbaddr=%p proto=0x%04x id=%d\n",
+		__entry->skbaddr, __entry->protocol, __entry->id)
+);
+
+/* define from upcall_start trace event a new event with the same proto,
+ and args instead named upcall_end */
+DEFINE_EVENT(upcall_start, upcall_end,
+	TP_PROTO(struct sk_buff *skb, int id),
+	TP_ARGS(skb, id)
+);
+
+#endif /*_TRACE_TRACE_H || TRACE_HEADER_MULTI_READ */
+
+/* our file is not located in include/trace/events - the default location*/
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_FILE trace
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
-- 
2.1.4
